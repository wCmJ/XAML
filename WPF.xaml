-----------------------------------------------------------------------
App.xaml
1.automatically generated.
2.property-StartupUri:  instructs which Window or Page to start up when the application is launched.
                        can simply be changed.
                        In some situations, you want more control over how and when the first window is displayed.
                            In this case, you can remove the StartupUri property and value and then do it all from Code-Behind instead.
                            


-----------------------------------------------------------------------
TextBlock
    <LineBreak /> same as \n
    <TextBlock TextTrimming="CharacterEllipsis/WordEllipsis" /> same as ...
    <TextBlock TextWrapping="wrap" />   same as automatic linebreak
TextBlock with <Bold>bold</Bold>, <Italic>italic</Italic> and <Underline>underlined</Underline> text.
This text has a <Hyperlink RequestNavigate="Hyperlink_RequestNavigate" NavigateUri="https://www.google.com">link</Hyperlink> in it.
private void Hyperlink_RequestNavigate(object sender, System.Windows.Navigation.RequestNavigateEventArgs e)
{
	System.Diagnostics.Process.Start(e.Uri.AbsoluteUri);
}    
TextBlock tb = new TextBlock();
tb.TextWrapping = TextWrapping.Wrap;
tb.Margin = new Thickness(10);
tb.Inlines.Add("An example on ");
tb.Inlines.Add(new Run("the TextBlock control ") { FontWeight = FontWeights.Bold });
tb.Inlines.Add("using ");
-----------------------------------------------------------------------
Label vs. TextBlock
The TextBlock only allows you to render a text string, while the Label also allows you to:
1.specify a border
2.render other ocntrols, e.g. an image
3.use templated content through the contentTemplate property
4.use access keys to give focus to relate controls.
<StackPanel Margin="10">
        <Label Content="_Name:" Target="{Binding ElementName=txtName}" />
        <TextBox Name="txtName" />
        <Label Content="_Mail:" Target="{Binding ElementName=txtMail}" />
        <TextBox Name="txtMail" />
        <Label Content="_Password:" Target="{Binding ElementName=txtPassword}" />
        <TextBox Name="txtPassword" />
</StackPanel>       
-----------------------------------------------------------------------    
TextBox
AcceptsReturn="True"
TextWrapping="Wrap"
SpellCheck.IsEnable="True"

-----------------------------------------------------------------------
Canvas: Canvas.Left/Canvas.Right/Canvas.Top/Canvas.Bottom
			the position relative to the four edges of the canvas.
			If not specified, gets default value. left-top.
		Canvas.ZIndex
			default value is 0.
			the element with the higher z-index overlaps the ones with the lower values.
			if two values are identical, the last defined element wins.
WarpPanel: 	will position each of its child controls next to the other, horizontally or vertically, until there is no more room, where it will wrap to the next line and then continue.
StackPanel:	doesn't wrap the content, it stretches its content in one direction			
Grid:	A Grid can contain multiple rows and columns.
<Grid.ColumnDefinitions>
			<ColumnDefinition Width="2*" />
			<ColumnDefinition Width="1*" />
			<ColumnDefinition Width="1*" />
		</Grid.ColumnDefinitions>
		<Grid.RowDefinitions>
			<RowDefinition Height="2*" />
			<RowDefinition Height="1*" />
			<RowDefinition Height="1*" />
		</Grid.RowDefinitions>


<Grid.ColumnDefinitions>
            <ColumnDefinition Width="1*" />		take up the rest
            <ColumnDefinition Width="Atuo" /> 	Width will determined by the length of the text.
            <ColumnDefinition Width="100" />	take up 100 pixels
        </Grid.ColumnDefinitions>
a width of 2*, which basically means that it uses twice the amount of space as the rows and columns with a width of 1* (or just * - that's the same)
In a Grid where one or several columns(or rows) have a variable(star) width, they automaticlly get to share the width/height not already used by the columns/rows which uses an absolute or Auto width/height
priority: 	Auto == absolute > *
			determined by turn

-----------------------------------------------------------------------
<Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <TextBlock FontSize="55" HorizontalAlignment="Center" VerticalAlignment="Center" TextWrapping="Wrap">Left side</TextBlock>
        <GridSplitter Grid.Column="1" Width="5"  HorizontalAlignment="Left"/>
        <TextBlock Grid.Column="2" FontSize="55" HorizontalAlignment="Center" VerticalAlignment="Center" TextWrapping="Wrap">Right side</TextBlock>
    </Grid>
HorizontalAlignment specifys the direction of move. default value is right.

<Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <TextBlock FontSize="55" HorizontalAlignment="Center" VerticalAlignment="Center" TextWrapping="Wrap">Left side</TextBlock>
        <GridSplitter Grid.Column="1" Width="5" HorizontalAlignment="Stretch" />
        <TextBlock Grid.Column="2" FontSize="55" HorizontalAlignment="Center" VerticalAlignment="Center" TextWrapping="Wrap">Right side</TextBlock>
    </Grid>
also use HorizontalAlignment









