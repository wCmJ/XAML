-----------------------------------------------------------------------------------------   one-way data binding
<Grid> 	
      <StackPanel Name = "Display"> 
		
         <StackPanel Orientation = "Horizontal" Margin = "50, 50, 0, 0"> 
            <TextBlock Text = "Name: " Margin = "10" Width = "100" /> 
            <TextBlock Margin = "10" Width = "100" Text = "{Binding Name}" />
         </StackPanel> 
		
         <StackPanel Orientation = "Horizontal" Margin = "50,0,50,0"> 
            <TextBlock Text = "Title: " Margin = "10" Width = "100" /> 
            <TextBlock Margin = "10" Width = "100" Text = "{Binding Title}" /> 
         </StackPanel> 
		
      </StackPanel> 	
</Grid> 
public class Employee
    {
        public string Name { get; set; }
        public string Title { get; set; }

        public static Employee GetEmployee()
        {
            var emp = new Employee()
            {
                Name = "Ali Ahmed",
                Title = "Developer"
            };
            return emp;
        }
    }
public MainWindow()
{
    InitializeComponent();
    DataContext = Employee.GetEmployee();
}

Structure:
	XAML									.CS
{Binding Name}						DataContext = Employee.GetEmployee()
{Binding Title}
-----------------------------------------------------------------------------------------   two-way data binding
<StackPanel>
        <ComboBox Name = "comboBox"  Margin = "50" Width = "100">
            <ComboBoxItem Content = "Green" />
            <ComboBoxItem  Content = "Yellow" IsSelected = "True" />
            <ComboBoxItem Content = "Orange" />
        </ComboBox>

        <TextBox  Name = "textBox" Margin = "50" 
         Width = "100" Height = "23" VerticalAlignment = "Top" 
         Text  = "{Binding ElementName = comboBox, Path = SelectedItem.Content, 
         Mode = TwoWay, UpdateSourceTrigger = PropertyChanged}" 
         Background = "{Binding ElementName = comboBox, Path = SelectedItem.Content}">
        </TextBox>
</StackPanel>

structure:
StackPanel 	-> ComboBox -> ComboBoxItem
	   				   	-> ComboBoxItem
					   	-> ComboBoxItem
	   	   	-> TextBox  -> Text {Binding ElementName = ComboBox, Path = SelectedItem.Content}
		       		   	-> Background {Binding ElementName = ComboBox, Path = SelectedItem.Content}
-----------------------------------------------------------------------------------------   event-handling
<Grid>
        <TextBox Name = "textBox1" TextWrapping = "Wrap" Margin = "10" Grid.Row = "7">
            Hi, this is XAML tutorial.
            <TextBox.ContextMenu>

                <ContextMenu>
                    <MenuItem Header = "Bold" IsCheckable = "True" 
                  Checked = "Bold_Checked" Unchecked = "Bold_Unchecked" />
                    <MenuItem Header = "Italic" IsCheckable = "True" Checked = "Italic_Checked" 
                  Unchecked = "Italic_Unchecked" />
                    <Separator />
                    <MenuItem Header = "Increase Font Size" Click = "IncreaseFont_Click" />
                    <MenuItem Header = "Decrease Font Size" Click = "DecreaseFont_Click" />
                </ContextMenu>

            </TextBox.ContextMenu>

        </TextBox>
</Grid>

        private void Bold_Checked(object sender, RoutedEventArgs e)
        {
            textBox1.FontWeight = FontWeights.Bold;
        }

        private void Bold_Unchecked(object sender, RoutedEventArgs e)
        {
            textBox1.FontWeight = FontWeights.Normal;
        }

        private void Italic_Checked(object sender, RoutedEventArgs e)
        {
            textBox1.FontStyle = FontStyles.Italic;
        }

        private void Italic_Unchecked(object sender, RoutedEventArgs e)
        {
            textBox1.FontStyle = FontStyles.Normal;
        }

        private void IncreaseFont_Click(object sender, RoutedEventArgs e)
        {
            if (textBox1.FontSize < 18)
            {
                textBox1.FontSize += 2;
            }
        }

        private void DecreaseFont_Click(object sender, RoutedEventArgs e)
        {
            if (textBox1.FontSize > 10)
            {
                textBox1.FontSize -= 2;
            }
        }
-----------------------------------------------------------------------------------------   markup extensions:	Windows.Resources
<Window.Resources>
    <SolidColorBrush Color="Red" x:key="myBrush" />
</Window.Resources>
<StackPanel>
    <TextBlock Foreground="{StaticResource myBrush}" Text="First Name" Width="100" Margin="10">
    <TextBlock Foreground="{StaticResource myBrush}" Text="Second Name" Width="100" Margin="10">
</StackPanel>
-----------------------------------------------------------------------------------------	markup extensions:	xmlns:index="cls-namespace:namespaceName"
xmlns:my="cls-namespace:XAMLMarkupExtension"
<Grid>
	<Button	Content="{my:MyMarkupExtension FirstStr= Markup SecondStr=Extension}" Width="20" Height="20" />   MyMarkupExtension is a class in namespace XAMLMarkupExtension, and has two variables FirstStr and SecondStr, which are assigned with Markup and Extension.
</Grid>
namespace XAMLMarkupExtension { 
   /// <summary> 
      /// Interaction logic for MainWindow.xaml 
   /// </summary> 
	
   public partial class MainWindow : Window { 
      public MainWindow() { 
         InitializeComponent(); 
      } 
   } 
	
   public class MyMarkupExtension : MarkupExtension { 
      public MyMarkupExtension() { } 
      public String FirstStr { get; set; } 
      public String SecondStr { get; set; }  
		
      public override object ProvideValue(IServiceProvider serviceProvider) { 
        return FirstStr + " " + SecondStr; 
      } 
   } 
}		
-----------------------------------------------------------------------------------------	dependency properties
<Grid>		
	<Button Width="" Height="" Margin="" Content="Dependency Property">
		<Button.Style>
			<Style TargetType="{x:Type button}">
				<Style.Triggers>
					<Triggers Property="IsMouseOver" Value="True">
						<Setter Property="Foreground" Value="red" />						
					</Triggers>	
				</Style.Triggers>	
			</Style>	
		</Button.Style>
	</Button>	
</Grid>		
		
-----------------------------------------------------------------------------------------		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

